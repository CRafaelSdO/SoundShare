import { Server } from "socket.io";
import { roomRepository } from "../repositories";
import { ChatService } from "./ChatService";

interface User {
  id: string;
  accessToken: string;
  name: string;
  email: string;
  image: string;
  role: string;
}

interface Track {
  id: string;
  title: string;
  description: string;
  thumbnail: string;
  url: string;
  user: User;
}

interface RoomUser {
  id: string;
  name: string;
  email: string;
  image: string;
  role: string;
  socketId: string;
  joinedAt: Date;
  // ‚úÖ NOVO: Campos para controle de atividade
  isActive: boolean;
  lastActivity: Date;
  canBeSyncSource: boolean;
}

interface RoomState {
  roomId: string;
  online: boolean;
  playing: boolean;
  currentTime: number;
  listeners: number;
  playlist: Track[];
  currentTrack: Track | null;
  users: Map<string, RoomUser>;
  owner: string;
  moderators: string[];
  createdAt: Date;
  lastActivity: Date;
  // ‚úÖ NOVO: Campos para sincroniza√ß√£o de tempo
  trackStartTime: Date | null;
  lastSyncTime: number;
  // ‚úÖ NOVO: Sistema simples de sincroniza√ß√£o
  videoStartTimestamp?: number; // Date.now() quando m√∫sica come√ßou
  videoId?: string; // ID da m√∫sica atual
  // ‚úÖ NOVO: Fonte de sincroniza√ß√£o din√¢mica
  syncSource: {
    userId: string;
    userRole: string;
    lastSyncTime: number;
    isActive: boolean;
    lastActivity: Date;
  } | null;
  // ‚úÖ NOVO: √öltimo tempo atualizado pelo host
  lastHostUpdate: Date | null;
}

const rooms: Record<string, RoomState> = {};

// Sistema de sincroniza√ß√£o de tempo para todas as salas
const timeSyncIntervals: Record<string, NodeJS.Timeout> = {};

// ‚úÖ NOVO: Sistema de heartbeat para verificar atividade dos usu√°rios
const heartbeatIntervals: Record<string, NodeJS.Timeout> = {};

// ‚úÖ NOVO: Fun√ß√£o simples para calcular tempo atual baseado em timestamp
function getCurrentVideoTime(room: RoomState): number {
  if (!room.playing || !room.videoStartTimestamp || !room.videoId) {
    return 0;
  }
  
  const now = Date.now();
  const elapsedSeconds = Math.floor((now - room.videoStartTimestamp) / 1000);
  
  console.log(`üïê Tempo calculado: ${elapsedSeconds}s (in√≠cio: ${room.videoStartTimestamp}, agora: ${now})`);
  
  return elapsedSeconds;
}

// Fun√ß√£o para calcular tempo atual baseado no tempo de in√≠cio da m√∫sica (MANTIDA PARA COMPATIBILIDADE)
function calculateCurrentTime(room: RoomState): number {
  if (!room.playing || !room.trackStartTime || !room.currentTrack) {
    console.log(`‚ö†Ô∏è N√£o √© poss√≠vel calcular tempo: playing=${room.playing}, trackStartTime=${!!room.trackStartTime}, currentTrack=${!!room.currentTrack}`);
    return room.currentTime;
  }
  
  const now = new Date();
  const elapsedSeconds = Math.floor((now.getTime() - room.trackStartTime.getTime()) / 1000);
  const calculatedTime = room.lastSyncTime + elapsedSeconds;
  
  console.log(`üïê Calculando tempo: lastSyncTime=${room.lastSyncTime}s, elapsed=${elapsedSeconds}s, resultado=${calculatedTime}s`);
  
  return calculatedTime;
}

// ‚úÖ NOVO: Fun√ß√£o para selecionar nova fonte de sincroniza√ß√£o
function selectNewSyncSource(room: RoomState): RoomUser | null {
  const activeUsers = Array.from(room.users.values()).filter(u => u.isActive && u.canBeSyncSource);
  
  if (activeUsers.length === 0) return null;
  
  // 1. Procura por Owner ativo
  const owner = activeUsers.find(u => u.role === 'owner');
  if (owner) return owner;
  
  // 2. Procura por Moderator ativo
  const moderator = activeUsers.find(u => u.role === 'moderator');
  if (moderator) return moderator;
  
  // 3. Procura por usu√°rio ativo mais antigo (primeiro a entrar)
  return activeUsers.sort((a, b) => 
    a.joinedAt.getTime() - b.joinedAt.getTime()
  )[0];
}

// ‚úÖ NOVO: Fun√ß√£o para atualizar fonte de sincroniza√ß√£o
function updateSyncSource(room: RoomState, io: any): boolean {
  const newSyncSource = selectNewSyncSource(room);
  
  if (newSyncSource) {
    const previousSource = room.syncSource?.userId;
    
    room.syncSource = {
      userId: newSyncSource.id,
      userRole: newSyncSource.role,
      lastSyncTime: room.currentTime || 0,
      isActive: true,
      lastActivity: new Date()
    };
    
    // ‚úÖ Notificar todos sobre a mudan√ßa de fonte
    io.to(room.roomId).emit("syncSourceChanged", {
      newSource: room.syncSource,
      previousSource: previousSource,
      reason: previousSource ? "source_left" : "new_source_selected"
    });
    
    console.log(`Nova fonte de sincroniza√ß√£o na sala ${room.roomId}: ${newSyncSource.name} (${newSyncSource.role})`);
    return true;
  } else {
    // ‚úÖ Sala vazia - para o player
    room.syncSource = null;
    room.playing = false;
    room.currentTime = 0;
    room.trackStartTime = null;
    room.lastSyncTime = 0;
    
    // ‚úÖ Parar sincroniza√ß√£o de tempo
    stopTimeSync(room.roomId);
    
    // ‚úÖ Notificar que sala ficou vazia
    io.to(room.roomId).emit("roomEmpty", { 
      message: "Sala vazia - reprodu√ß√£o parada",
      reason: "no_active_users"
    });
    
    console.log(`Sala ${room.roomId} ficou vazia - reprodu√ß√£o parada`);
    return false;
  }
}

// ‚úÖ NOVO: Fun√ß√£o para verificar atividade dos usu√°rios
function checkUserActivity(room: RoomState, io: any) {
  const now = new Date();
  let hasActiveUsers = false;
  
  room.users.forEach(user => {
    // ‚úÖ Verificar se socket ainda est√° conectado e na sala
    const socket = io.sockets.sockets.get(user.socketId);
    const wasActive = user.isActive;
    
    user.isActive = socket && socket.connected && socket.rooms.has(room.roomId);
    
    // ‚úÖ Se status mudou, notificar
    if (wasActive !== user.isActive) {
      io.to(room.roomId).emit("userStatusChanged", {
        userId: user.id,
        isActive: user.isActive,
        reason: user.isActive ? "user_connected" : "user_disconnected"
      });
      
      if (user.isActive) {
        user.lastActivity = now;
      }
    }
    
    // ‚úÖ IMPORTANTE: Contar usu√°rios ativos independente de mudan√ßa de status
    if (user.isActive) {
      hasActiveUsers = true;
    }
  });
  
  // ‚úÖ Se n√£o h√° usu√°rios ativos, marcar sala como offline
  if (!hasActiveUsers) {
    room.online = false;
    room.playing = false;
    room.currentTrack = null;
    room.currentTime = 0;
    room.trackStartTime = null;
    room.lastSyncTime = 0;
    room.syncSource = null;
    
    // ‚úÖ Sincronizar com banco de dados
    syncRoomOnlineStatus(room.roomId, false);
    
    // ‚úÖ Parar sincroniza√ß√£o e heartbeat
    stopTimeSync(room.roomId);
    stopHeartbeat(room.roomId);
    
    // ‚úÖ Notificar que sala ficou offline
    io.to(room.roomId).emit("roomOffline", { 
      message: "Sala ficou offline - n√£o h√° usu√°rios ativos",
      reason: "no_active_users"
    });
    
    console.log(`Sala ${room.roomId} ficou offline - n√£o h√° usu√°rios ativos`);
  } else {
    // ‚úÖ IMPORTANTE: Se h√° usu√°rios ativos, garantir que a sala esteja online
    if (!room.online) {
      room.online = true;
      syncRoomOnlineStatus(room.roomId, true);
      console.log(`üîÑ Sala ${room.roomId} reativada - usu√°rios ativos encontrados`);
    }
  }
}

// Fun√ß√£o para iniciar sincroniza√ß√£o de tempo para uma sala (FALLBACK)
function startTimeSync(roomId: string, ioInstance: any) {
  if (timeSyncIntervals[roomId]) {
    clearInterval(timeSyncIntervals[roomId]);
  }
  
  timeSyncIntervals[roomId] = setInterval(() => {
    const room = rooms[roomId];
    if (room && room.online && room.playing && room.currentTrack) {
      // ‚úÖ NOVO: Usar sistema simples primeiro
      let currentTime = room.currentTime;
      let source = "server_calculation";
      
      if (room.videoStartTimestamp && room.videoId) {
        // Usar sistema simples
        currentTime = getCurrentVideoTime(room);
        room.currentTime = currentTime;
        source = "simple_timestamp";
      } else if (room.syncSource?.isActive) {
        // Fallback para sistema antigo
        const timeSinceHostUpdate = room.lastHostUpdate ? Date.now() - room.lastHostUpdate.getTime() : Infinity;
        
        if (timeSinceHostUpdate < 3000) { // 3 segundos
          // Host atualizou recentemente - usar tempo do host
          console.log(`üîÑ Host atualizou recentemente (${Math.floor(timeSinceHostUpdate/1000)}s atr√°s) - usando tempo do host: ${room.currentTime}s`);
          source = "host_recent";
        } else {
          // Host n√£o atualizou - usar c√°lculo como fallback
          console.log(`‚ö†Ô∏è Host n√£o atualizou h√° ${Math.floor(timeSinceHostUpdate/1000)}s - usando c√°lculo como fallback`);
          currentTime = calculateCurrentTime(room);
          room.currentTime = currentTime;
          source = "fallback_calculation";
        }
      }
      
      // ‚úÖ Enviar sincroniza√ß√£o para todos os usu√°rios da sala
      ioInstance.to(roomId).emit("timeSync", { 
        currentTime: currentTime,
        trackId: room.currentTrack.id,
        syncSource: room.syncSource,
        source: source
      });
    }
  }, 5000); // Sincronizar a cada 5 segundos
}

// ‚úÖ NOVO: Fun√ß√£o para iniciar heartbeat para uma sala
function startHeartbeat(roomId: string, io: any) {
  if (heartbeatIntervals[roomId]) {
    clearInterval(heartbeatIntervals[roomId]);
  }
  
  heartbeatIntervals[roomId] = setInterval(() => {
    const room = rooms[roomId];
    if (room && room.online) {
      checkUserActivity(room, io);
      
      // ‚úÖ Se a fonte de sincroniza√ß√£o ficou inativa, selecionar nova
      if (room.syncSource && !room.syncSource.isActive) {
        updateSyncSource(room, io);
      }
    }
  }, 30000); // Verificar a cada 30 segundos
}

// Fun√ß√£o para parar sincroniza√ß√£o de tempo para uma sala
function stopTimeSync(roomId: string) {
  if (timeSyncIntervals[roomId]) {
    clearInterval(timeSyncIntervals[roomId]);
    delete timeSyncIntervals[roomId];
  }
}

// ‚úÖ NOVO: Fun√ß√£o para parar heartbeat para uma sala
function stopHeartbeat(roomId: string) {
  if (heartbeatIntervals[roomId]) {
    clearInterval(heartbeatIntervals[roomId]);
    delete heartbeatIntervals[roomId];
  }
}

// ‚úÖ NOVO: Fun√ß√£o para sincronizar status online com banco de dados
async function syncRoomOnlineStatus(roomId: string, online: boolean) {
  try {
    const room = await roomRepository.findById(roomId);
    if (room) {
      room.online = online;
      await roomRepository.update(room);
      console.log(`üîÑ Status online da sala ${roomId} sincronizado com banco: ${online}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao sincronizar status online da sala ${roomId}:`, error);
  }
}

export function startSocketServer(server: any) {
  const io = new Server(server, {
    path:"/socket.io",
    cors: {
      origin: "*",
    },
  });

  io.on("connection", (socket) => {
    console.log("Usu√°rio conectado:", socket.id);

    // Entrar na sala
    socket.on("joinRoom", ({ roomId, userId, userData }) => {
      socket.join(roomId);

      // Criar sala se n√£o existir
      if (!rooms[roomId]) {
        rooms[roomId] = {
          roomId,
          online: false, // Inicialmente offline at√© o dono entrar
          playing: false,
          currentTime: 0,
          listeners: 0,
          playlist: [],
          currentTrack: null,
          users: new Map(),
          owner: userId, // ‚úÖ CORRE√á√ÉO: Owner √© sempre quem cria a sala
          moderators: userData.moderators || [],
          createdAt: new Date(),
          lastActivity: new Date(),
          // Inicializar campos de sincroniza√ß√£o
          trackStartTime: null,
          lastSyncTime: 0,
          // ‚úÖ NOVO: Sistema simples de sincroniza√ß√£o
          videoStartTimestamp: undefined,
          videoId: undefined,
          // ‚úÖ NOVO: Inicializar fonte de sincroniza√ß√£o
          syncSource: null,
          // ‚úÖ NOVO: Inicializar √∫ltimo tempo atualizado pelo host
          lastHostUpdate: null,
        };
      }

      const room = rooms[roomId];
      
      // ‚úÖ CORRE√á√ÉO: Verificar se √© o dono da sala (corrigir inconsist√™ncias)
      // Se userData indica que √© owner, corrigir room.owner
      if (userData.owner === userId || userData.role === 'owner') {
        room.owner = userId;
        console.log(`üîß Corrigindo owner da sala ${roomId}: ${userId}`);
      }
      
      const isOwner = userId === room.owner;
      const isModerator = room.moderators.includes(userId);
      
      // Se for o dono, ativar a sala
      if (isOwner && !room.online) {
        room.online = true;
        console.log(`Sala ${roomId} ativada pelo dono ${userId}`);
        
        // ‚úÖ Sincronizar com banco de dados
        syncRoomOnlineStatus(roomId, true);
        
        // ‚úÖ Iniciar heartbeat para a sala
        startHeartbeat(roomId, io);
      }
      
      // ‚úÖ NOVO: Se owner voltou, reassumir controle automaticamente
      if (isOwner && room.online) {
        console.log(`Owner ${userId} voltou √† sala ${roomId} - reassumindo controle`);
        
        // ‚úÖ Reassumir como fonte de sincroniza√ß√£o
        room.syncSource = {
          userId: userId,
          userRole: 'owner',
          lastSyncTime: room.currentTime || 0,
          isActive: true,
          lastActivity: new Date()
        };
        
        // ‚úÖ Notificar que owner reassumiu controle
        io.to(roomId).emit("ownerReturned", {
          ownerId: userId,
          message: "Owner voltou e reassumiu controle da sala",
          syncSource: room.syncSource
        });
        
        console.log(`Owner ${userId} reassumiu controle da sala ${roomId}`);
      }

      // Adicionar usu√°rio √† sala
      if (!room.users.has(userId)) {
        const roomUser: RoomUser = {
          id: userId,
          name: userData.name,
          email: userData.email,
          image: userData.image,
          role: userData.role,
          socketId: socket.id,
          joinedAt: new Date(),
          // ‚úÖ NOVO: Inicializar campos de atividade
          isActive: true,
          lastActivity: new Date(),
          canBeSyncSource: isOwner || isModerator || true, // Todos podem ser fonte por enquanto
        };
        
        room.users.set(userId, roomUser);
        room.listeners = room.users.size;
        room.lastActivity = new Date();
      } else {
        // ‚úÖ Usu√°rio reconectando - atualizar status
        const existingUser = room.users.get(userId)!;
        existingUser.isActive = true;
        existingUser.lastActivity = new Date();
        existingUser.socketId = socket.id;
      }

      // ‚úÖ NOVO: Calcular tempo atual usando sistema simples
      let currentTimeToSend = room.currentTime;
      if (room.playing && room.currentTrack) {
        // Tentar usar sistema simples primeiro
        if (room.videoStartTimestamp && room.videoId) {
          currentTimeToSend = getCurrentVideoTime(room);
          room.currentTime = currentTimeToSend;
          console.log(`üéØ Usu√°rio entrando: m√∫sica tocando, tempo calculado (simples): ${currentTimeToSend}s`);
        } else if (room.trackStartTime) {
          // Fallback para sistema antigo
          currentTimeToSend = calculateCurrentTime(room);
          room.currentTime = currentTimeToSend;
          console.log(`üéØ Usu√°rio entrando: m√∫sica tocando, tempo calculado (antigo): ${currentTimeToSend}s`);
        } else {
          // Se est√° tocando mas n√£o tem timestamp, criar um baseado no tempo atual
          console.log(`‚ö†Ô∏è M√∫sica tocando sem timestamp - criando um baseado no tempo atual`);
          const now = Date.now();
          room.videoStartTimestamp = now - (room.currentTime * 1000); // Ajustar para o tempo atual
          room.videoId = room.currentTrack.id;
          room.trackStartTime = new Date(now - (room.currentTime * 1000));
          room.lastSyncTime = room.currentTime || 0;
          currentTimeToSend = room.currentTime || 0;
          console.log(`üéØ Timestamp criado: ${room.videoStartTimestamp}, tempo atual: ${currentTimeToSend}s`);
        }
      } else {
        console.log(`‚ÑπÔ∏è M√∫sica n√£o est√° tocando: tempo=${currentTimeToSend}s`);
      }

      // ‚úÖ NOVO: Selecionar fonte de sincroniza√ß√£o se n√£o houver
      if (!room.syncSource) {
        updateSyncSource(room, io);
      }

      // Enviar estado atual da sala para o usu√°rio que entrou
      const roomState = {
        ...room,
        currentTime: currentTimeToSend,
        users: Array.from(room.users.values()),
        currentUserRole: isOwner ? 'owner' : isModerator ? 'moderator' : 'user',
        canModerate: isOwner || isModerator,
        // ‚úÖ NOVO: Incluir fonte de sincroniza√ß√£o
        syncSource: room.syncSource,
      };
      
      socket.emit("roomJoined", roomState);
      
      // Notificar outros usu√°rios sobre o novo membro
      socket.to(roomId).emit("userJoined", {
        user: room.users.get(userId),
        listeners: room.listeners,
        online: room.online,
        syncSource: room.syncSource,
      });

      // ‚úÖ CORRE√á√ÉO: Sempre calcular tempo atual antes de enviar updateRoom
      if (room.playing && room.currentTrack && room.trackStartTime) {
        room.currentTime = calculateCurrentTime(room);
        console.log(`üîÑ updateRoom: tempo recalculado: ${room.currentTime}s`);
      }

      // Atualizar estado da sala para todos
      io.to(roomId).emit("updateRoom", {
        ...room,
        currentTime: room.currentTime, // ‚úÖ Usar tempo calculado
        users: Array.from(room.users.values()),
        syncSource: room.syncSource,
      });

      console.log(`Usu√°rio ${userId} entrou na sala ${roomId}. Total: ${room.listeners}. Tempo atual: ${currentTimeToSend}s. Fonte: ${room.syncSource?.userId || 'nenhuma'}`);
    });

    // Ativar/Desativar sala (apenas dono)
    socket.on("toggleRoomStatus", ({ roomId, userId, online }) => {
      const room = rooms[roomId];
      
      if (room && userId === room.owner) {
        room.online = online;
        room.lastActivity = new Date();
        
        // ‚úÖ Sincronizar com banco de dados
        syncRoomOnlineStatus(roomId, online);
        
        if (!online) {
          // ‚úÖ Sala desativada pelo dono - parar tudo
          room.playing = false;
          room.currentTrack = null;
          room.currentTime = 0;
          room.trackStartTime = null;
          room.lastSyncTime = 0;
          room.syncSource = null;
          
          // ‚úÖ Parar sincroniza√ß√£o e heartbeat
          stopTimeSync(roomId);
          stopHeartbeat(roomId);
          
          // ‚úÖ Desconectar todos os usu√°rios
          io.to(roomId).emit("roomOffline", { 
            message: "Sala foi desativada pelo dono",
            reason: "owner_disabled"
          });
          
          // ‚úÖ Limpar usu√°rios da sala
          room.users.clear();
          room.listeners = 0;
        } else {
          // ‚úÖ Sala reativada - iniciar heartbeat
          startHeartbeat(roomId, io);
        }
        
        io.to(roomId).emit("updateRoom", {
          ...room,
          users: Array.from(room.users.values()),
          syncSource: room.syncSource,
        });
        
        console.log(`Sala ${roomId} ${online ? 'ativada' : 'desativada'} por ${userId}`);
      }
    });

    // Adicionar m√∫sica √† playlist
    socket.on("addTrack", ({ roomId, track, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        // Verificar se a m√∫sica j√° existe na playlist
        const trackExists = room.playlist.some(t => t.id === track.id);
        
        if (!trackExists) {
          room.playlist.push(track);
          room.lastActivity = new Date();
          
          io.to(roomId).emit("trackAdded", { track, playlist: room.playlist });
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
          
          console.log(`M√∫sica "${track.title}" adicionada √† sala ${roomId} por ${userId}`);
        }
      }
    });

    // Remover m√∫sica da playlist (apenas dono e moderadores)
    socket.on("removeTrack", ({ roomId, trackId, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canRemove = userId === room.owner || room.moderators.includes(userId);
        
        if (canRemove) {
          const trackIndex = room.playlist.findIndex(t => t.id === trackId);
          
          if (trackIndex !== -1) {
            const removedTrack = room.playlist.splice(trackIndex, 1)[0];
            room.lastActivity = new Date();
            
            io.to(roomId).emit("trackRemoved", { trackId, playlist: room.playlist });
            io.to(roomId).emit("updateRoom", {
              ...room,
              users: Array.from(room.users.values()),
              syncSource: room.syncSource,
            });
            
            console.log(`M√∫sica "${removedTrack.title}" removida da sala ${roomId} por ${userId}`);
          }
        }
      }
    });

    // Controle de reprodu√ß√£o
    socket.on("playPause", ({ roomId, userId, playing }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        if (canControl) {
          room.playing = playing;
          room.lastActivity = new Date();
          
          // ‚úÖ NOVO: Gerenciar sincroniza√ß√£o de tempo com sistema simples
          if (playing && room.currentTrack) {
            // Iniciar reprodu√ß√£o - marcar tempo de in√≠cio
            if (!room.videoStartTimestamp || !room.videoId) {
              room.videoStartTimestamp = Date.now();
              room.videoId = room.currentTrack.id;
              room.trackStartTime = new Date();
              room.lastSyncTime = room.currentTime;
              console.log(`üéµ playPause: iniciando reprodu√ß√£o com timestamp: ${room.videoStartTimestamp}`);
            }
            // Iniciar sincroniza√ß√£o de tempo
            startTimeSync(roomId, io);
          } else if (!playing) {
            // Pausar reprodu√ß√£o - parar sincroniza√ß√£o
            room.trackStartTime = null;
            stopTimeSync(roomId);
            console.log(`‚è∏Ô∏è playPause: pausando reprodu√ß√£o`);
          }
          
          io.to(roomId).emit("playbackStateChanged", { 
            playing, 
            currentTime: room.currentTime,
            syncSource: room.syncSource,
          });
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
        }
      }
    });

    // Definir m√∫sica atual
    socket.on("playTrack", ({ roomId, track, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        if (canControl) {
          // ‚úÖ CORRE√á√ÉO: Parar sincroniza√ß√£o anterior se houver
          if (room.playing && room.currentTrack) {
            stopTimeSync(roomId);
          }
          
          // ‚úÖ CORRE√á√ÉO: Adicionar m√∫sica √† playlist se n√£o existir (apenas para playTrack)
          const trackExists = room.playlist.some(t => t.id === track.id);
          if (!trackExists) {
            room.playlist.push(track);
            console.log(`üéµ playTrack: m√∫sica "${track.title}" adicionada √† playlist`);
          }
          
          // ‚úÖ NOVO: Nova m√∫sica - sempre come√ßar do in√≠cio com sistema simples
          room.currentTrack = track;
          room.playing = true;
          room.currentTime = 0;
          room.lastSyncTime = 0;
          room.trackStartTime = new Date();
          room.videoStartTimestamp = Date.now(); // ‚úÖ NOVO: Timestamp simples
          room.videoId = track.id; // ‚úÖ NOVO: ID da m√∫sica
          room.lastActivity = new Date();
          
          console.log(`üéµ playTrack: nova m√∫sica "${track.title}", come√ßando do in√≠cio (timestamp: ${room.videoStartTimestamp})`);
          
          // ‚úÖ Iniciar sincroniza√ß√£o de tempo para nova m√∫sica
          startTimeSync(roomId, io);
          
          // ‚úÖ CORRE√á√ÉO: Sempre calcular tempo atual antes de enviar trackChanged
          if (room.playing && room.currentTrack && room.trackStartTime) {
            room.currentTime = calculateCurrentTime(room);
            console.log(`üéµ trackChanged: tempo recalculado: ${room.currentTime}s`);
          }

          // ‚úÖ NOVO: Emitir trackAdded se foi adicionada √† playlist
          if (!trackExists) {
            io.to(roomId).emit("trackAdded", { track, playlist: room.playlist });
          }

          io.to(roomId).emit("trackChanged", { 
            track, 
            playing: true, 
            currentTime: room.currentTime, // ‚úÖ Usar tempo calculado
            syncSource: room.syncSource,
          });
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
          
          console.log(`M√∫sica atual alterada para "${track.title}" na sala ${roomId} por ${userId}`);
        }
      }
    });

    // ‚úÖ PRINCIPAL: Sincroniza√ß√£o de tempo de reprodu√ß√£o do usu√°rio fonte
    socket.on("syncTrack", ({ roomId, currentTime, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        // ‚úÖ Verificar se √© o usu√°rio fonte de sincroniza√ß√£o
        const isSyncSource = room.syncSource?.userId === userId;
        
        if (canControl && isSyncSource) {
          console.log(`üéØ Host ${userId} enviou tempo: ${currentTime}s`);
          
          // ‚úÖ Atualizar tempo com valor recebido do host
          room.currentTime = currentTime;
          room.lastSyncTime = currentTime;
          room.trackStartTime = new Date();
          room.lastActivity = new Date();
          room.lastHostUpdate = new Date(); // ‚úÖ Marcar √∫ltima atualiza√ß√£o do host
          
          // ‚úÖ Reiniciar sincroniza√ß√£o com novo tempo
          startTimeSync(roomId, io);
          
          // ‚úÖ Enviar para outros usu√°rios (n√£o para quem enviou)
          socket.to(roomId).emit("timeSync", { 
            currentTime,
            trackId: room.currentTrack?.id,
            syncSource: room.syncSource,
            source: "host_update"
          });
          
          console.log(`‚úÖ Tempo sincronizado do host: ${currentTime}s na sala ${roomId}`);
        } else if (!canControl) {
          socket.emit("permissionDenied", { 
            action: "syncTrack", 
            message: "Apenas dono e moderadores podem sincronizar tempo" 
          });
        } else if (!isSyncSource) {
          socket.emit("syncSourceOnly", { 
            message: "Apenas a fonte de sincroniza√ß√£o pode enviar tempo" 
          });
        }
      }
    });

    // Pr√≥xima m√∫sica
    socket.on("nextTrack", ({ roomId, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        if (canControl && room.playlist.length > 0) {
          // ‚úÖ CORRE√á√ÉO: Parar sincroniza√ß√£o anterior
          if (room.playing && room.currentTrack) {
            stopTimeSync(roomId);
          }
          
          const currentIndex = room.currentTrack 
            ? room.playlist.findIndex(t => t.id === room.currentTrack?.id)
            : -1;
          
          const nextIndex = (currentIndex + 1) % room.playlist.length;
          const nextTrack = room.playlist[nextIndex];
          
          room.currentTrack = nextTrack;
          room.currentTime = 0; // ‚úÖ Nova m√∫sica sempre come√ßa do in√≠cio
          room.trackStartTime = new Date();
          room.lastSyncTime = 0;
          room.videoStartTimestamp = Date.now(); // ‚úÖ NOVO: Timestamp simples
          room.videoId = nextTrack.id; // ‚úÖ NOVO: ID da m√∫sica
          room.lastActivity = new Date();
          
          // ‚úÖ Iniciar sincroniza√ß√£o para nova m√∫sica
          startTimeSync(roomId, io);
          
          // ‚úÖ CORRE√á√ÉO: Sempre calcular tempo atual antes de enviar trackChanged
          if (room.playing && room.currentTrack && room.trackStartTime) {
            room.currentTime = calculateCurrentTime(room);
            console.log(`üéµ trackChanged: tempo recalculado: ${room.currentTime}s`);
          }

          // Emitir evento espec√≠fico para mudan√ßa de m√∫sica
          io.to(roomId).emit("trackChanged", { 
            track: nextTrack, 
            playing: true, 
            currentTime: room.currentTime, // ‚úÖ Usar tempo calculado
            direction: 'next',
            previousTrack: room.currentTrack,
            syncSource: room.syncSource,
          });
          
          // Atualizar estado da sala
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
          
          console.log(`Pr√≥xima m√∫sica: "${nextTrack.title}" na sala ${roomId} por ${userId}`);
        } else if (!canControl) {
          socket.emit("permissionDenied", { 
            action: "nextTrack", 
            message: "Apenas dono e moderadores podem passar para a pr√≥xima m√∫sica" 
          });
        } else if (room.playlist.length === 0) {
          socket.emit("playlistEmpty", { 
            message: "N√£o h√° m√∫sicas na playlist para navegar" 
          });
        }
      }
    });

    // Pular para m√∫sica espec√≠fica da playlist (apenas dono e moderadores)
    socket.on("jumpToTrack", ({ roomId, userId, trackIndex }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        if (canControl && room.playlist.length > 0) {
          // Validar √≠ndice
          if (trackIndex >= 0 && trackIndex < room.playlist.length) {
            // ‚úÖ CORRE√á√ÉO: Parar sincroniza√ß√£o anterior
            if (room.playing && room.currentTrack) {
              stopTimeSync(roomId);
            }
            
            const targetTrack = room.playlist[trackIndex];
            
            room.currentTrack = targetTrack;
            room.currentTime = 0; // ‚úÖ Nova m√∫sica sempre come√ßa do in√≠cio
            room.trackStartTime = new Date();
            room.lastSyncTime = 0;
            room.videoStartTimestamp = Date.now(); // ‚úÖ NOVO: Timestamp simples
            room.videoId = targetTrack.id; // ‚úÖ NOVO: ID da m√∫sica
            room.lastActivity = new Date();
            
            // ‚úÖ Iniciar sincroniza√ß√£o para nova m√∫sica
            startTimeSync(roomId, io);
            
            // ‚úÖ CORRE√á√ÉO: Sempre calcular tempo atual antes de enviar trackChanged
            if (room.playing && room.currentTrack && room.trackStartTime) {
              room.currentTime = calculateCurrentTime(room);
              console.log(`üéµ trackChanged: tempo recalculado: ${room.currentTime}s`);
            }

            // Emitir evento espec√≠fico para mudan√ßa de m√∫sica
            io.to(roomId).emit("trackChanged", { 
              track: targetTrack, 
              playing: true, 
              currentTime: room.currentTime, // ‚úÖ Usar tempo calculado
              direction: 'jump',
              trackIndex: trackIndex,
              previousTrack: room.currentTrack,
              syncSource: room.syncSource,
            });
            
            // Atualizar estado da sala
            io.to(roomId).emit("updateRoom", {
              ...room,
              users: Array.from(room.users.values()),
              syncSource: room.syncSource,
            });
            
            console.log(`Pulou para m√∫sica ${trackIndex}: "${targetTrack.title}" na sala ${roomId} por ${userId}`);
          } else {
            socket.emit("invalidTrackIndex", { 
              message: `√çndice inv√°lido. A playlist tem ${room.playlist.length} m√∫sicas (0-${room.playlist.length - 1})` 
            });
          }
        } else if (!canControl) {
          socket.emit("permissionDenied", { 
            action: "jumpToTrack", 
            message: "Apenas dono e moderadores podem pular para m√∫sicas espec√≠ficas" 
          });
        } else if (room.playlist.length === 0) {
          socket.emit("playlistEmpty", { 
            message: "N√£o h√° m√∫sicas na playlist para navegar" 
          });
        }
      }
    });

    // M√∫sica anterior
    socket.on("previousTrack", ({ roomId, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canControl = userId === room.owner || room.moderators.includes(userId);
        
        if (canControl && room.playlist.length > 0) {
          // ‚úÖ CORRE√á√ÉO: Parar sincroniza√ß√£o anterior
          if (room.playing && room.currentTrack) {
            stopTimeSync(roomId);
          }
          
          const currentIndex = room.currentTrack 
            ? room.playlist.findIndex(t => t.id === room.currentTrack?.id)
            : -1;
          
          const prevIndex = currentIndex <= 0 ? room.playlist.length - 1 : currentIndex - 1;
          const prevTrack = room.playlist[prevIndex];
          
          room.currentTrack = prevTrack;
          room.currentTime = 0; // ‚úÖ Nova m√∫sica sempre come√ßa do in√≠cio
          room.trackStartTime = new Date();
          room.lastSyncTime = 0;
          room.videoStartTimestamp = Date.now(); // ‚úÖ NOVO: Timestamp simples
          room.videoId = prevTrack.id; // ‚úÖ NOVO: ID da m√∫sica
          room.lastActivity = new Date();
          
          // ‚úÖ Iniciar sincroniza√ß√£o para nova m√∫sica
          startTimeSync(roomId, io);
          
          // ‚úÖ CORRE√á√ÉO: Sempre calcular tempo atual antes de enviar trackChanged
          if (room.playing && room.currentTrack && room.trackStartTime) {
            room.currentTime = calculateCurrentTime(room);
            console.log(`üéµ trackChanged: tempo recalculado: ${room.currentTime}s`);
          }

          // Emitir evento espec√≠fico para mudan√ßa de m√∫sica
          io.to(roomId).emit("trackChanged", { 
            track: prevTrack, 
            playing: true, 
            currentTime: room.currentTime, // ‚úÖ Usar tempo calculado
            direction: 'previous',
            previousTrack: room.currentTrack,
            syncSource: room.syncSource,
          });
          
          // Atualizar estado da sala
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
          
          console.log(`M√∫sica anterior: "${prevTrack.title}" na sala ${roomId} por ${userId}`);
        } else if (!canControl) {
          socket.emit("permissionDenied", { 
            action: "previousTrack", 
            message: "Apenas dono e moderadores podem voltar para a m√∫sica anterior" 
          });
        } else if (room.playlist.length === 0) {
          socket.emit("playlistEmpty", { 
            message: "N√£o h√° m√∫sicas na playlist para navegar" 
          });
        }
      }
    });

    // Expulsar usu√°rio (apenas dono e moderadores)
    socket.on("kickUser", ({ roomId, targetUserId, userId, reason }) => {
      const room = rooms[roomId];
      
      if (room && room.online) {
        const user = room.users.get(userId);
        const canKick = userId === room.owner || room.moderators.includes(userId);
        
        if (canKick && targetUserId !== userId) {
          const targetUser = room.users.get(targetUserId);
          
          if (targetUser) {
            // Remover usu√°rio da sala
            room.users.delete(targetUserId);
            room.listeners = room.users.size;
            room.lastActivity = new Date();
            
            // ‚úÖ Se a fonte de sincroniza√ß√£o foi expulsa, selecionar nova
            if (room.syncSource && room.syncSource.userId === targetUserId) {
              updateSyncSource(room, io);
            }
            
            // Desconectar usu√°rio expulso
            io.to(targetUser.socketId).emit("kicked", { 
              reason: reason || "Voc√™ foi expulso da sala",
              roomId 
            });
            
            // Notificar outros usu√°rios
            io.to(roomId).emit("userKicked", { 
              userId: targetUserId, 
              reason,
              listeners: room.listeners,
              syncSource: room.syncSource,
            });
            
            io.to(roomId).emit("updateRoom", {
              ...room,
              users: Array.from(room.users.values()),
              syncSource: room.syncSource,
            });
            
            console.log(`Usu√°rio ${targetUserId} expulso da sala ${roomId} por ${userId}`);
          }
        }
      }
    });

    // Adicionar/Remover moderador (apenas dono)
    socket.on("toggleModerator", ({ roomId, targetUserId, userId, isModerator }) => {
      const room = rooms[roomId];
      
      if (room && userId === room.owner) {
        if (isModerator) {
          if (!room.moderators.includes(targetUserId)) {
            room.moderators.push(targetUserId);
          }
        } else {
          room.moderators = room.moderators.filter(id => id !== targetUserId);
        }
        
        room.lastActivity = new Date();
        
        io.to(roomId).emit("moderatorUpdated", { 
          userId: targetUserId, 
          isModerator,
          moderators: room.moderators,
          syncSource: room.syncSource,
        });
        
        io.to(roomId).emit("updateRoom", {
          ...room,
          users: Array.from(room.users.values()),
          syncSource: room.syncSource,
        });
        
        console.log(`Usu√°rio ${targetUserId} ${isModerator ? 'promovido a' : 'removido de'} moderador na sala ${roomId}`);
      }
    });

    // Sair da sala
    socket.on("leaveRoom", ({ roomId, userId }) => {
      const room = rooms[roomId];
      
      if (room && room.users.has(userId)) {
        const user = room.users.get(userId);
        
        // Remover usu√°rio da sala
        room.users.delete(userId);
        room.listeners = room.users.size;
        room.lastActivity = new Date();
        
        socket.leave(roomId);
        
        // ‚úÖ Se a fonte de sincroniza√ß√£o saiu, selecionar nova
        if (room.syncSource && room.syncSource.userId === userId) {
          updateSyncSource(room, io);
        }
        
        // ‚úÖ Se for o dono, mas h√° outros usu√°rios, N√ÉO desativar a sala
        if (userId === room.owner && room.users.size > 0) {
          // ‚úÖ Transferir propriedade para o pr√≥ximo usu√°rio mais antigo
          const nextOwner = Array.from(room.users.values()).sort((a, b) => 
            a.joinedAt.getTime() - b.joinedAt.getTime()
          )[0];
          
          room.owner = nextOwner.id;
          nextOwner.role = 'owner';
          
          console.log(`Propriedade da sala ${roomId} transferida para ${nextOwner.name} (${nextOwner.id})`);
          
          // ‚úÖ Notificar sobre mudan√ßa de dono
          io.to(roomId).emit("ownerChanged", {
            newOwner: {
              id: nextOwner.id,
              name: nextOwner.name,
              role: nextOwner.role
            },
            previousOwner: userId
          });
          
          // ‚úÖ Atualizar fonte de sincroniza√ß√£o se necess√°rio
          if (!room.syncSource || !room.syncSource.isActive) {
            updateSyncSource(room, io);
          }
        } else if (userId === room.owner && room.users.size === 0) {
          // ‚úÖ Sala realmente vazia - desativar
          room.online = false;
          room.playing = false;
          room.currentTrack = null;
          room.currentTime = 0;
          room.trackStartTime = null;
          room.lastSyncTime = 0;
          room.syncSource = null;
          
          // ‚úÖ Sincronizar com banco de dados
          syncRoomOnlineStatus(roomId, false);
          
          // ‚úÖ Parar sincroniza√ß√£o e heartbeat
          stopTimeSync(roomId);
          stopHeartbeat(roomId);
          
          console.log(`Dono ${userId} saiu da sala ${roomId}. Sala vazia - desativada.`);
        } else {
          // ‚úÖ Usu√°rio comum saiu
          console.log(`Usu√°rio ${userId} saiu da sala ${roomId}. Total: ${room.listeners}`);
        }
        
        // ‚úÖ Notificar outros usu√°rios sobre a sa√≠da
        if (room.users.size > 0) {
          io.to(roomId).emit("userLeft", { 
            userId, 
            listeners: room.listeners,
            syncSource: room.syncSource,
          });
          
          io.to(roomId).emit("updateRoom", {
            ...room,
            users: Array.from(room.users.values()),
            syncSource: room.syncSource,
          });
        }
      }
    });

    // ===== SISTEMA DE CHAT =====
    
    // Enviar mensagem de chat
    socket.on("sendChatMessage", async (data) => {
      try {
        console.log("üì® Nova mensagem de chat recebida:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room || !room.users.has(data.userId)) {
          socket.emit("error", { message: "Usu√°rio n√£o est√° na sala" });
          return;
        }
        
        // Salvar mensagem no Firestore
        const message = await ChatService.sendMessage(data);
        
        // Emitir para todos na sala
        io.to(data.roomId).emit("chatMessage", message);
        
        console.log("‚úÖ Mensagem de chat enviada com sucesso");
      } catch (error) {
        console.error("‚ùå Erro ao enviar mensagem de chat:", error);
        const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
        socket.emit("error", { message: errorMessage });
      }
    });

    // Editar mensagem de chat
    socket.on("editChatMessage", async (data) => {
      try {
        console.log("‚úèÔ∏è Edi√ß√£o de mensagem recebida:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room || !room.users.has(data.userId)) {
          socket.emit("error", { message: "Usu√°rio n√£o est√° na sala" });
          return;
        }
        
        // Editar mensagem no Firestore
        const updatedMessage = await ChatService.editMessage(data);
        
        // Emitir para todos na sala
        io.to(data.roomId).emit("messageEdited", updatedMessage);
        
        console.log("‚úÖ Mensagem editada com sucesso");
      } catch (error) {
        console.error("‚ùå Erro ao editar mensagem:", error);
        const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
        socket.emit("error", { message: errorMessage });
      }
    });

    // Deletar mensagem de chat
    socket.on("deleteChatMessage", async (data) => {
      try {
        console.log("üóëÔ∏è Dele√ß√£o de mensagem recebida:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room || !room.users.has(data.userId)) {
          socket.emit("error", { message: "Usu√°rio n√£o est√° na sala" });
          return;
        }
        
        // Deletar mensagem no Firestore
        await ChatService.deleteMessage(data);
        
        // Emitir para todos na sala
        io.to(data.roomId).emit("messageDeleted", data.messageId);
        
        console.log("‚úÖ Mensagem deletada com sucesso");
      } catch (error) {
        console.error("‚ùå Erro ao deletar mensagem:", error);
        const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
        socket.emit("error", { message: errorMessage });
      }
    });

    // Solicitar hist√≥rico de chat
    socket.on("requestChatHistory", async (data) => {
      try {
        console.log("üìö Solicita√ß√£o de hist√≥rico de chat recebida:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room) {
          socket.emit("error", { message: "Sala n√£o encontrada" });
          return;
        }
        
        // Buscar hist√≥rico no Firestore
        const history = await ChatService.getChatHistory(data.roomId);
        
        // Enviar hist√≥rico para o usu√°rio solicitante
        socket.emit("chatHistory", history);
        
        console.log("‚úÖ Hist√≥rico de chat enviado com sucesso");
      } catch (error) {
        console.error("‚ùå Erro ao buscar hist√≥rico de chat:", error);
        const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
        socket.emit("error", { message: errorMessage });
      }
    });

    // Usu√°rio digitando
    socket.on("userTyping", (data) => {
      try {
        console.log("‚å®Ô∏è Usu√°rio digitando:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room || !room.users.has(data.userId)) {
          return;
        }
        
        // Emitir para todos na sala (exceto o usu√°rio que est√° digitando)
        socket.to(data.roomId).emit("userTyping", {
          userId: data.userId,
          userName: data.userName
        });
        
        console.log("‚úÖ Evento de digita√ß√£o enviado");
      } catch (error) {
        console.error("‚ùå Erro ao processar evento de digita√ß√£o:", error);
      }
    });

    // Usu√°rio parou de digitar
    socket.on("stopTyping", (data) => {
      try {
        console.log("‚èπÔ∏è Usu√°rio parou de digitar:", data);
        
        // Validar se usu√°rio est√° na sala
        const room = rooms[data.roomId];
        if (!room || !room.users.has(data.userId)) {
          return;
        }
        
        // Emitir para todos na sala (exceto o usu√°rio que parou de digitar)
        socket.to(data.roomId).emit("userStoppedTyping", data.userId);
        
        return;
      } catch (error) {
        console.error("‚ùå Erro ao processar evento de parada de digita√ß√£o:", error);
      }
    });

    // Desconex√£o
    socket.on("disconnect", () => {
      console.log("Usu√°rio desconectado:", socket.id);
      
      // Encontrar e remover usu√°rio de todas as salas
      for (const [roomId, room] of Object.entries(rooms)) {
        for (const [userId, user] of room.users.entries()) {
          if (user.socketId === socket.id) {
            room.users.delete(userId);
            room.listeners = room.users.size;
            room.lastActivity = new Date();
            
            // ‚úÖ Se a fonte de sincroniza√ß√£o desconectou, selecionar nova
            if (room.syncSource && room.syncSource.userId === userId) {
              updateSyncSource(room, io);
            }
            
            // ‚úÖ Se for o dono, mas h√° outros usu√°rios, escolher novo host tempor√°rio
            if (userId === room.owner && room.users.size > 0) {
              // ‚úÖ CORRE√á√ÉO: N√ÉO transferir propriedade - owner permanece fixo
              // Apenas escolher novo host tempor√°rio para sincroniza√ß√£o
              console.log(`Owner ${userId} desconectou da sala ${roomId} - escolhendo novo host tempor√°rio`);
              
              // ‚úÖ Atualizar fonte de sincroniza√ß√£o (escolhe moderador ou listener mais antigo)
              updateSyncSource(room, io);
              
              // ‚úÖ Notificar que owner saiu mas sala continua ativa
              io.to(roomId).emit("ownerDisconnected", {
                ownerId: userId,
                message: "Owner saiu da sala - host tempor√°rio assumiu controle",
                newHost: room.syncSource
              });
            } else if (userId === room.owner && room.users.size === 0) {
              // ‚úÖ Sala realmente vazia - desativar
              room.online = false;
              room.playing = false;
              room.currentTrack = null;
              room.currentTime = 0;
              room.trackStartTime = null;
              room.lastSyncTime = 0;
              room.syncSource = null;
              
              // ‚úÖ Sincronizar com banco de dados
              syncRoomOnlineStatus(roomId, false);
              
              // ‚úÖ Parar sincroniza√ß√£o e heartbeat
              stopTimeSync(roomId);
              stopHeartbeat(roomId);
              
              console.log(`Dono ${userId} desconectado da sala ${roomId}. Sala vazia - desativada.`);
            } else {
              // ‚úÖ Usu√°rio comum desconectou
              io.to(roomId).emit("userLeft", { 
                userId, 
                listeners: room.listeners,
                syncSource: room.syncSource,
              });
              
              io.to(roomId).emit("updateRoom", {
                ...room,
                users: Array.from(room.users.values()),
                syncSource: room.syncSource,
              });
            }
            
            break;
          }
        }
      }
    });

    // Ping para manter conex√£o ativa
    socket.on("ping", () => {
      socket.emit("pong");
    });
  });

  console.log("Servidor Socket.IO rodando com sistema de fonte de sincroniza√ß√£o din√¢mica...");
}
